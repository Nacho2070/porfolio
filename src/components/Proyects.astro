---
import JavaIcon from "../Icons/skillsIcon/JavaIcon.astro";
import MysqlIcon from "../Icons/skillsIcon/MysqlIcon.astro";
import SpringBootIcon from "../Icons/skillsIcon/SpringBootIcon.astro";
import AngularIcon from "../Icons/AngularIcon.astro";
import AstroIcon from "../Icons/AstroIcon.astro"; 
import Tailwind from "../Icons/Tailwind.astro";
import JwtIcon from "../Icons/JwtIcon.astro";
import CodeButton from "../components/CodeButton.astro";
import GitHubIcon from "../Icons/GitHub-Icon.astro";
import ProyectsHeroIcon from "../Icons/ProyectsHeroIcon.astro";
import JsIcon from "../Icons/JsIcon.astro";
import DockerImage from "../Icons/skillsIcon/DockerImage.astro";
import KafkaIcon from "../Icons/kafkaIcon.astro";
const TAGS = {
  Java: {
    name: "Java",
    class: "bg-black text-white",
    icon: JavaIcon,
  },
  SpringBoot: {
    name: "Spring boot",
    class: "bg-[#003159] text-white",
    icon: SpringBootIcon,
  },
  MySQL: {
    name: "SQL",
    class: "bg-[#003159] text-white",
    icon: MysqlIcon,
  },
  TAILWIND: {
    name: "Tailwind CSS",
    class: "bg-[#003159] text-white",
    icon: Tailwind,
  },
  JWT: {
    name: "JWT",
    class: "bg-[#003159] text-white",
    icon: JwtIcon,
  },
  ASTRO: {
    name: "Astro",
    class: "bg-[#003159] text-white",
    icon: AstroIcon,
  },
  ANGULAR: {
    name: "Angular",
    class: "bg-[#003159] text-white",
    icon: AngularIcon,
  },
  JS:{
    name: "Javascript",
    class: "bg-[#003159] text-white",
    icon: JsIcon,
  },
  DOCKER:{
    name: "Docker",
    class: "bg-[#003159] text-white",
    icon: DockerImage,
  },
  KAFKA:{
    name: "ApacheKafka",
    class: "bg-[#003159] text-white",
    icon: KafkaIcon
  }

}
const PROJECTS = [
  {
    title: "API de Gestión de Reservas de Películas con Control de Acceso por Roles",
    description: "Desarrollé una API REST desplegada en Render utilizando Docker, que incluye registro e inicio de sesión con control de acceso basado en roles. El sistema incluye un CRUD y la funcionalidad de reserva de películas, permitiendo a los usuarios reservar funciones y obtener tickets con asientos reservados, detalles de funciones reservadas y consultar los asientos disponibles. Implementa tests unitarios con Mockito y JUnit, y base de datos SQL",
    github: "https://github.com/Nacho2070/MovieReservation",
    image: "images/MovieRerservation.png",
    link: "https://movie-reservation-combined-v1.onrender.com/swagger-ui/index.html#",
    tags: [TAGS.Java, TAGS.SpringBoot, TAGS.MySQL,TAGS.JWT],
  },  
  {
    title: "Social Media App",
    description: 'Desarrollé una aplicación que permite a los usuarios registrarse, publicar posts, dar "like", comentar y recibir notificaciones asincrónicas por correo electrónico. La aplicación fue diseñada con una arquitectura basada en microservicios. Además, implementé un sistema de mensajería asincrónica utilizando Apache Kafka para gestionar la notificación de eventos. Para el entorno de desarrollo, utilicé Docker en la creación de bases de datos y en la configuración de imágenes de Apache Kafka y Keycloak.',
    github: "https://github.com/Nacho2070/SocialMedia",
    image: "images/MicroServicios.png",
    tags: [TAGS.Java, TAGS.SpringBoot, TAGS.KAFKA, TAGS.DOCKER],
  },
  {
    title: "Porfolio",
    description: "Portafolio personal utilizando Astro, también incorporé algunas funcionalidades con JavaScript",
    github: "https://github.com/Nacho2070/Porfolio",
    image: "images/Porfolio.png",
    tags: [TAGS.ASTRO,TAGS.TAILWIND,TAGS.JS],
  }
];

---
<h3 class="flex items-center text-3xl mb-10 font-semibold gap-x-3 text-white undefined">
  <ProyectsHeroIcon />
  Proyectos personales<h3>
<section id="projects" class="flex flex-col justify-center mb-12 items-center max-w lg:gap-y-14 px-4 ">                

  
            {
                PROJECTS.map(({ image, title, description, tags, github, link }) => (

                <article class="group flex flex-col mt-3 md:flex-row md:items-center lg:flex-row space-x-0 h-full lg:mt-5 bg-whiteshadow-sm rounded-xl dark:shadow-neutral-700/70">                    
                    <div class="w-full md:w-1/2">
                        <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
                          <img alt={title} loading="lazy" width="45" height="45" class=" object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105" 
                          src={image}>
                        </div>
                    </div>
                    
                    <div class="w-full  p-4 mt-2 lg:mt-0 md:w-1/2 md:max-w-lg">
                          <h1 class="text-2xl font-semibold  text-cyan-600   dark:hover:text-white">{title}</h1>                                
                          <p class="mt-5 w-full flex-none text-sm leading-6 text-slate-300">{description}</p>
                          <ul class="flex flex-row my-5 items-center gap-x-2 lg:gap-x-5">
                              {tags.map((tag)=> (
                                  <li>
                                      <span class="flex gap-x-2 text-[9.5px] rounded-full border-[0.5px] border-gray-800 lg:text-xs text-white py-1 px-2">
                                      <tag.icon class="size-4" />
                                        {tag.name}
                                      </span>                        
                                  </li>    
                                  ))
                              }
                          </ul>                                                  
                    <div class="w-full flex flex-row-reverse gap-x-4">          
                      {link != null ? (
                        <CodeButton href={github}>
                          <GitHubIcon class="size-4" />
                          Code
                        </CodeButton>
                        <CodeButton href={link}>
                          <ProyectsHeroIcon class="size-4" />
                          SwaggerDoc
                        </CodeButton>            
                      ) : (
                        <CodeButton href={github}>
                          <GitHubIcon class="size-4" />
                          Code
                        </CodeButton>
                      )}
                    </div>
              </div>
            </article>                      
            ))
            }                                                                                                                                                                                                                 
  </section>